name: CloudFormation Build
run-name: Build Stack in ${{ github.ref_name }} by ${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      aws-role-arn:
        description: 'Arn of the role to be assumed.'
        type: string
        required: true
        default: arn:aws:iam::637423502513:role/subhamay-github-oidc-role
      aws-region:
        description: AWS region where the services will be deployed
        type: string
        required: true
        default: us-east-1
      cfn-template-file:
        description: 'CloudFormation template file name'
        type: string
        required: true
        default: 'root-stack-template.yaml'
      cfn-params-file:
        description: 'CloudFormation parameters file'
        type: string
        required: true
        default: './cfn/params/cfn-parameters.json'
      ci-build:
        description: 'Is this a Ci Build ?'
        type: boolean
        required: true
        default: true
      lambda:
        description: 'Is this repo contains Lambda?'
        type: boolean
        required: true
        default: false
      glue:
        description: 'Is this repo contains Glue?'
        type: boolean
        required: true
        default: false
      state-machine:
        description: 'Is this repo contains State Machine?'
        type: boolean
        required: true
        default: false
        
permissions:
  # contents: read
  # packages: read
  # To report GitHub Actions status checks
  # statuses: write
  # To use OIDC
  id-token: write

jobs:
  files-updated:
    name: Files Updated since last commit.
    runs-on: ubuntu-latest
    steps:
      - name: List the files updated since last commit
        run: |
            echo "List of files updated since last commit."

  scan-services:
    name: Determine the services used
    runs-on: ubuntu-latest
    needs: 
      -  files-updated
    steps:
      -  name: Determine the AWS services used
         run: |
           echo "Determine the AWS services used"

  scan-iac:
    name: DevSecOps IaC Scan
    runs-on: ubuntu-latest
    needs: 
      -  files-updated
    steps:
      -  name: Checkov Scan
         run: |
           echo "Checkov Scan"

  scan-code:
    name: DevSecOps Code Scan
    runs-on: ubuntu-latest
    needs: 
      -  scan-services
    steps:
      -  name: Code Vulnarability Scan
         run: |
           echo "Code Vulnarability Scan"

  build-code:
    name: Build Code
    runs-on: ubuntu-latest
    needs: 
      -  scan-services
      -  scan-iac
      -  scan-code
    steps:
      -  name: Build Lambda
         run: |
           echo "Build Lambda"

      -  name: Build Lambda Layer
         run: |
           echo "Build Lambda Layer"

      -  name: Build Glue Script
         run: |
           echo "Build Glue Script"

      -  name: Build State Machine
         run: |
           echo "Build State Machine"

  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: 
      -  build-code
      -  scan-iac
    steps:
    -  name: Build and Test
       run: |
         echo "Build and Test"
      
                
 
# jobs:
#   devsecops-scan:
#     name: DevSecOps Scan
#     runs-on: ubuntu-latest
#     steps:
#       - name: Scan and Validate CloudFormation Template
#         id: scan-and-validate
#         uses: subhamay-bhattacharyya-gha/cfn-validate-scan-action@feature/SB-0002-add-snyk-check
#         with:
#           aws-role-arn: ${{ inputs.aws-role-arn }}
#           aws-region: ${{ inputs.aws-region }}
#           template-dir: cfn
#           template-file: root-stack-template.yaml
#           iac-framework: cloudformation
#           soft-fail: true
#           # github-token: ${{ secrets.GITHUB_TOKEN }}
#           snyk-token: ${{ secrets.SNYK_TOKEN }}
#           snyk-organization-id: ${{ secrets.SNYK_ORGANIZATION_ID }}

#       -  name: List the available files
#          run: |
#            ls -LR
          
#       - name: ðŸ“‹ Summarize and Print Checkov Scan Report with Snippets
#         uses: subhamay-bhattacharyya-gha/checkov-report-action@feature/SB-0001-create-new-action

#       - name: Debug outputs (optional)
#         # if: always()
#         run: |
#             echo "Valid Template: ${{ steps.scan-and-validate.outputs.valid-template }}"
#             echo "Validation Error: ${{ steps.scan-and-validate.outputs.validation-error }}"


                
#   build-lambda-code:
#     name: Build Lambda code
#     runs-on: ubuntu-latest
#     needs:
#       - devsecops-scan
#     steps:
#       - name: Build Code
#         if:  github.event.inputs.lambda == 'true'
#         run: |
#           echo "Build Lambda Code"

#       - name: Dummy Step
#         run: |
#           echo "Dummy Step"
        
        
#   build-glue-code:
#     name: Build Glue code
#     runs-on: ubuntu-latest
#     needs:
#       - devsecops-scan
#     steps:
#       - name: Build Glue Code
#         if:  github.event.inputs.glue == 'true'
#         run: |
#           echo "Scan and upload Glue Code to S3"

#       - name: Dummy Step
#         run: |
#           echo "Dummy Step"

#   build-state-machine:
#     name: Build State Machine
#     runs-on: ubuntu-latest
#     needs:
#       - devsecops-scan
#     steps:
#       - name: Build State Machine
#         if:  github.event.inputs.state-machine == 'true'
#         run: echo "Hello from Build State Machine"

#       - name: Dummy Step
#         run: |
#           echo "Dummy Step"
        
#   build-ci-stack:
#     name: Build Ci Stack
#     runs-on: ubuntu-latest
#     needs:
#       - build-lambda-code
#       - build-glue-code
#       - build-state-machine
#     steps:
#       - name: Create Ci Stack
#         run: echo "Hello from Create Ci Stack"

#   delete-ci-stack:
#     name: Delete Ci Stack
#     runs-on: ubuntu-latest
#     needs:
#       - build-ci-stack
#     steps:
#       - name: Delete Ci Stack
#         run: echo "Hello from Delete Ci Stack"

#   upload-artifacts:
#     name: Upload Release Artifacts
#     runs-on: ubuntu-latest
#     needs:
#       - build-ci-stack
#       - delete-ci-stack
#     steps:
#       - name: Upload Release Artifacts
#         run: echo "Hello from Upload Release Artifacts"

#   create-release:
#     if: success()
#     name: Create Release
#     runs-on: ubuntu-latest
#     needs:
#       - upload-artifacts
#     steps:
#       - name: Create Release
#         run: echo "Hello from Create Release"

