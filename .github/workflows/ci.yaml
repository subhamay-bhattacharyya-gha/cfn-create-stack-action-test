name: CloudFormation Build
run-name: Build Stack in ${{ github.ref_name }} by ${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      aws-role-arn:
        description: 'ARN of the role to be assumed.'
        type: string
        required: true
        default: arn:aws:iam::637423502513:role/subhamay-github-oidc-role
      aws-region:
        description: 'AWS region where the services will be deployed.'
        type: string
        required: true
        default: us-east-1
      cfn-template-file:
        description: 'CloudFormation template file name.'
        type: string
        required: true
        default: 'root-stack-template.yaml'
      cfn-params-file:
        description: 'CloudFormation parameters file.'
        type: string
        required: true
        default: './cfn/params/cfn-parameters.json'
      ci-build:
        description: 'Is this a CI build?'
        type: boolean
        required: true
        default: true
      lambda:
        description: 'Does this repository contain Lambda functions?'
        type: boolean
        required: true
        default: false
      glue:
        description: 'Does this repository contain AWS Glue scripts?'
        type: boolean
        required: true
        default: false
      state-machine:
        description: 'Does this repository contain a State Machine?'
        type: boolean
        required: true
        default: false

permissions:
  id-token: write

jobs:
  files-updated:
    name: Files Updated
    runs-on: ubuntu-latest
    steps:
      - name: List Changed Files
        run: echo "Listing changed files."

  detect-services:
    name: Detect Used AWS Services
    runs-on: ubuntu-latest
    needs:
      - files-updated
    steps:
      - name: Detect AWS Services Used
        run: echo "Detecting services used."

  cfn-lint:
    name: CloudFormation Lint
    runs-on: ubuntu-latest
    needs: detect-services
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install cfn-lint
        run: pip install cfn-lint

      - name: Run cfn-lint
        run: |
          echo "Running cfn-lint on template: ${{ github.event.inputs.cfn-template-file }}"
          cfn-lint ${{ github.event.inputs.cfn-template-file }}

  cfn-validate:
    name: CloudFormation Template Validation
    runs-on: ubuntu-latest
    needs: detect-services
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ github.event.inputs.aws-role-arn }}
          aws-region: ${{ github.event.inputs.aws-region }}

      - name: Validate CloudFormation Template
        run: |
          aws cloudformation validate-template \
            --template-body file://${{ github.event.inputs.cfn-template-file }}

  checkov-scan:
    name: Checkov IaC Scan
    runs-on: ubuntu-latest
    needs: detect-services
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov
        run: |
          checkov -f ${{ github.event.inputs.cfn-template-file }} --soft-fail

  snyk-scan:
    name: Snyk IaC Scan
    runs-on: ubuntu-latest
    needs: detect-services
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SNYK_ORG_ID: ${{ secrets.SNYK_ORGANIZATION_ID }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Snyk CLI
        run: |
          npm install -g snyk

      - name: Authenticate Snyk
        run: snyk auth "${SNYK_TOKEN}"

      - name: Run Snyk IaC Scan
        run: |
          snyk iac test ${{ github.event.inputs.cfn-template-file }} --org=${SNYK_ORG_ID} --report --severity-threshold=low || true


  scan-code:
    name: Code Vulnerability Scan
    runs-on: ubuntu-latest
    needs:
      - detect-services
    steps:
      - name: Run Code Security Scan
        run: echo "Scanning code for vulnerabilities."

  prepare-builds:
    name: Prepare Build Jobs
    runs-on: ubuntu-latest
    needs:
      - cfn-lint
      - cfn-validate
      - checkov-scan
      - snyk-scan
    steps:
      - name: Preparation Complete
        run: echo "Build jobs can now run."

  build-lambda:
    name: Build Lambda Package
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.lambda == 'true' }}
    needs:
      - prepare-builds
    steps:
      - name: Build Lambda Package
        run: echo "Building Lambda package..."

  build-lambda-layer:
    name: Build Lambda Layer
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.lambda == 'true' }}
    needs:
      - prepare-builds
    steps:
      - name: Build Lambda Layer
        run: echo "Building Lambda layer..."

  build-glue:
    name: Build Glue Script
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.glue == 'true' }}
    needs:
      - prepare-builds
    steps:
      - name: Package Glue Script
        run: echo "Packaging Glue script..."

  build-state-machine:
    name: Deploy State Machine
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.state-machine == 'true' }}
    needs:
      - prepare-builds
    steps:
      - name: Deploy State Machine
        run: echo "Deploying State Machine..."

  ci-build:
    name: CI Build
    runs-on: ubuntu-latest
    # if: ${{ github.event.inputs.ci-build == 'true' }}
    if: always()
    needs:
      - build-lambda
      - build-lambda-layer
      - build-glue
      - build-state-machine
    steps:
      - name: Finalize CI Build
        run: echo "CI build completed regardless of individual builds."




  # build-test:
  #   name: Build and Test
  #   runs-on: ubuntu-latest
  #   needs: 
  #     -  build-code
  #     -  scan-iac
  #   steps:
  #   -  name: Build and Test
  #      run: |
  #        echo "Build and Test"
      
                
 
# jobs:
#   devsecops-scan:
#     name: DevSecOps Scan
#     runs-on: ubuntu-latest
#     steps:
#       - name: Scan and Validate CloudFormation Template
#         id: scan-and-validate
#         uses: subhamay-bhattacharyya-gha/cfn-validate-scan-action@feature/SB-0002-add-snyk-check
#         with:
#           aws-role-arn: ${{ inputs.aws-role-arn }}
#           aws-region: ${{ inputs.aws-region }}
#           template-dir: cfn
#           template-file: root-stack-template.yaml
#           iac-framework: cloudformation
#           soft-fail: true
#           # github-token: ${{ secrets.GITHUB_TOKEN }}
#           snyk-token: ${{ secrets.SNYK_TOKEN }}
#           snyk-organization-id: ${{ secrets.SNYK_ORGANIZATION_ID }}

#       -  name: List the available files
#          run: |
#            ls -LR
          
#       - name: ðŸ“‹ Summarize and Print Checkov Scan Report with Snippets
#         uses: subhamay-bhattacharyya-gha/checkov-report-action@feature/SB-0001-create-new-action

#       - name: Debug outputs (optional)
#         # if: always()
#         run: |
#             echo "Valid Template: ${{ steps.scan-and-validate.outputs.valid-template }}"
#             echo "Validation Error: ${{ steps.scan-and-validate.outputs.validation-error }}"


                
#   build-lambda-code:
#     name: Build Lambda code
#     runs-on: ubuntu-latest
#     needs:
#       - devsecops-scan
#     steps:
#       - name: Build Code
#         if:  github.event.inputs.lambda == 'true'
#         run: |
#           echo "Build Lambda Code"

#       - name: Dummy Step
#         run: |
#           echo "Dummy Step"
        
        
#   build-glue-code:
#     name: Build Glue code
#     runs-on: ubuntu-latest
#     needs:
#       - devsecops-scan
#     steps:
#       - name: Build Glue Code
#         if:  github.event.inputs.glue == 'true'
#         run: |
#           echo "Scan and upload Glue Code to S3"

#       - name: Dummy Step
#         run: |
#           echo "Dummy Step"

#   build-state-machine:
#     name: Build State Machine
#     runs-on: ubuntu-latest
#     needs:
#       - devsecops-scan
#     steps:
#       - name: Build State Machine
#         if:  github.event.inputs.state-machine == 'true'
#         run: echo "Hello from Build State Machine"

#       - name: Dummy Step
#         run: |
#           echo "Dummy Step"
        
#   build-ci-stack:
#     name: Build Ci Stack
#     runs-on: ubuntu-latest
#     needs:
#       - build-lambda-code
#       - build-glue-code
#       - build-state-machine
#     steps:
#       - name: Create Ci Stack
#         run: echo "Hello from Create Ci Stack"

#   delete-ci-stack:
#     name: Delete Ci Stack
#     runs-on: ubuntu-latest
#     needs:
#       - build-ci-stack
#     steps:
#       - name: Delete Ci Stack
#         run: echo "Hello from Delete Ci Stack"

#   upload-artifacts:
#     name: Upload Release Artifacts
#     runs-on: ubuntu-latest
#     needs:
#       - build-ci-stack
#       - delete-ci-stack
#     steps:
#       - name: Upload Release Artifacts
#         run: echo "Hello from Upload Release Artifacts"

#   create-release:
#     if: success()
#     name: Create Release
#     runs-on: ubuntu-latest
#     needs:
#       - upload-artifacts
#     steps:
#       - name: Create Release
#         run: echo "Hello from Create Release"

