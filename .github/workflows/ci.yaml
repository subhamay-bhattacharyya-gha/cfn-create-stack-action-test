name: CloudFormation Build
run-name: Build Stack in ${{ github.ref_name }} by ${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      aws-role-arn:
        description: 'Arn of the role to be assumed.'
        type: string
        required: true
        default: arn:aws:iam::637423502513:role/subhamay-github-oidc-role
      aws-region:
        description: AWS region where the services will be deployed
        type: string
        required: true
        default: us-east-1
      cfn-template-file:
        description: 'CloudFormation template file name'
        type: string
        required: true
        default: 'root-stack-template.yaml'
      cfn-params-file:
        description: 'CloudFormation parameters file'
        type: string
        required: true
        default: './cfn/params/cfn-parameters.json'
      ci-build:
        description: 'Is this a Ci Build ?'
        type: boolean
        required: true
        default: true
      lambda:
        description: 'Is this repo contains Lambda?'
        type: boolean
        required: true
        default: false
      glue:
        description: 'Is this repo contains Glue?'
        type: boolean
        required: true
        default: false
      state-machine:
        description: 'Is this repo contains State Machine?'
        type: boolean
        required: true
        default: false
        
permissions:
  # contents: read
  # packages: read
  # To report GitHub Actions status checks
  # statuses: write
  # To use OIDC
  id-token: write
      
jobs:
  devsecops-scan:
    name: DevSecOps Scan
    runs-on: ubuntu-latest
    steps:
      - name: Scan and Validate CloudFormation Template
        id: scan-and-validate
        uses: subhamay-bhattacharyya-gha/cfn-validate-scan-action@main
        with:
          aws-role-arn: ${{ inputs.aws-role-arn }}
          aws-region: ${{ inputs.aws-region }}
          template-dir: cfn
          template-file: root-stack-template.yaml
          iac-framework: cloudformation
          soft-fail: false
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug outputs (optional)
        if: always()
        run: |
            echo "Valid Template: ${{ steps.scan-and-validate.outputs.valid-template }}"
            echo "Validation Error: ${{ steps.scan-and-validate.outputs.validation-error }}"

      - name: List the files
        if: always()
        run: |
          ls -LR
          # echo "*************   checkov-problem-matcher-softfail.json  ************************" 
          # cat checkov-problem-matcher-softfail.json
          # echo "==============================================================================="
          # echo "*************   checkov-problem-matcher.json  *********************************" 
          # cat checkov-problem-matcher.json
          # echo "==============================================================================="
          echo "*************   results.sarif  ************************************************" 
          cat results.sarif
          echo "==============================================================================="

      - name: 📋 Summarize and Print Checkov Scan Report with Snippets
        if: always()
        run: |
          echo "### 🛡️ Checkov Scan Report Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Rule ID | Description | File | Start Line | End Line | Severity |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------------|------|------------|----------|----------|" >> $GITHUB_STEP_SUMMARY
      
          echo "=========== RAW CHECKOV FINDINGS ===========" 
          echo "| Rule ID | Description | File | Start | End | Severity |"
      
          jq -r '
            .runs[0].results[] as $result |
            .runs[0].tool.driver.rules[$result.ruleIndex] as $rule |
            {
              ruleId: $result.ruleId,
              desc: $rule.shortDescription.text,
              file: $result.locations[0].physicalLocation.artifactLocation.uri,
              start: $result.locations[0].physicalLocation.region.startLine,
              end: $result.locations[0].physicalLocation.region.endLine,
              level: $result.level,
              snippet: $result.locations[0].physicalLocation.region.snippet.text
            } | @base64
          ' results.sarif | while read -r item; do
            _jq() {
              echo "${item}" | base64 --decode | jq -r "${1}"
            }
      
            ruleId=$(_jq '.ruleId')
            desc=$(_jq '.desc')
            file=$(_jq '.file')
            start=$(_jq '.start')
            end=$(_jq '.end')
            level=$(_jq '.level')
            snippet=$(_jq '.snippet')
      
            # Summary table
            echo "| \`$ruleId\` | $desc | \`$file\` | $start | $end | $level |" >> $GITHUB_STEP_SUMMARY
      
            # Print to console
            echo "| $ruleId | $desc | $file | $start | $end | $level |"
            
            # Detailed snippet section (summary + console)
            {
              echo ""
              echo "**🔎 Rule \`$ruleId\` — $desc**"
              echo ""
              echo "- **File:** \`$file\`"
              echo "- **Lines:** $start - $end"
              echo "- **Severity:** $level"
              echo ""
              echo "```yaml"
              echo "$snippet"
              echo "```"
              echo ""
            } >> $GITHUB_STEP_SUMMARY
      
            # Also output to console
            echo ""
            echo "🔎 Rule $ruleId — $desc"
            echo "File: $file | Lines: $start-$end | Severity: $level"
            echo "------- Code Snippet -------"
            echo "$snippet"
            echo ""
          done



                
  build-lambda-code:
    name: Build Lambda code
    runs-on: ubuntu-latest
    needs:
      - devsecops-scan
    steps:
      - name: Build Code
        if:  github.event.inputs.lambda == 'true'
        run: |
          echo "Build Lambda Code"

      - name: Dummy Step
        run: |
          echo "Dummy Step"
        
        
  build-glue-code:
    name: Build Glue code
    runs-on: ubuntu-latest
    needs:
      - devsecops-scan
    steps:
      - name: Build Glue Code
        if:  github.event.inputs.glue == 'true'
        run: |
          echo "Scan and upload Glue Code to S3"

      - name: Dummy Step
        run: |
          echo "Dummy Step"

  build-state-machine:
    name: Build State Machine
    runs-on: ubuntu-latest
    needs:
      - devsecops-scan
    steps:
      - name: Build State Machine
        if:  github.event.inputs.state-machine == 'true'
        run: echo "Hello from Build State Machine"

      - name: Dummy Step
        run: |
          echo "Dummy Step"
        
  build-ci-stack:
    name: Build Ci Stack
    runs-on: ubuntu-latest
    needs:
      - build-lambda-code
      - build-glue-code
      - build-state-machine
    steps:
      - name: Create Ci Stack
        run: echo "Hello from Create Ci Stack"

  delete-ci-stack:
    name: Delete Ci Stack
    runs-on: ubuntu-latest
    needs:
      - build-ci-stack
    steps:
      - name: Delete Ci Stack
        run: echo "Hello from Delete Ci Stack"

  upload-artifacts:
    name: Upload Release Artifacts
    runs-on: ubuntu-latest
    needs:
      - build-ci-stack
      - delete-ci-stack
    steps:
      - name: Upload Release Artifacts
        run: echo "Hello from Upload Release Artifacts"

  create-release:
    if: success()
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - upload-artifacts
    steps:
      - name: Create Release
        run: echo "Hello from Create Release"

