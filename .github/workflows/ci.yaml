name: CloudFormation Build
run-name: Build Stack in ${{ github.ref_name }} by ${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      aws-role-arn:
        description: 'Arn of the role to be assumed.'
        type: string
        required: true
        default: arn:aws:iam::637423502513:role/subhamay-github-oidc-role
      aws-region:
        description: AWS region where the services will be deployed
        type: string
        required: true
        default: us-east-1
      cfn-template-file:
        description: 'CloudFormation template file name'
        type: string
        required: true
        default: 'root-stack-template.yaml'
      cfn-params-file:
        description: 'CloudFormation parameters file'
        type: string
        required: true
        default: './cfn/params/cfn-parameters.json'
      ci-build:
        description: 'Is this a Ci Build ?'
        type: boolean
        required: true
        default: true
      lambda:
        description: 'Is this repo contains Lambda?'
        type: boolean
        required: true
        default: false
      glue:
        description: 'Is this repo contains Glue?'
        type: boolean
        required: true
        default: false
      state-machine:
        description: 'Is this repo contains State Machine?'
        type: boolean
        required: true
        default: false
        
permissions:
  # contents: read
  # packages: read
  # To report GitHub Actions status checks
  # statuses: write
  # To use OIDC
  id-token: write
      
jobs:
  devsecops-scan:
    name: DevSecOps Scan
    runs-on: ubuntu-latest
    steps:
      - name: Scan and Validate CloudFormation Template
        id: scan-and-validate
        uses: subhamay-bhattacharyya-gha/cfn-validate-scan-action@main
        with:
          aws-role-arn: ${{ inputs.aws-role-arn }}
          aws-region: ${{ inputs.aws-region }}
          template-dir: cfn
          template-file: root-stack-template.yaml
          iac-framework: cloudformation
          soft-fail: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug outputs (optional)
        run: |
            echo "Valid Template: ${{ steps.scan-and-validate.outputs.valid-template }}"
            echo "Validation Error: ${{ steps.scan-and-validate.outputs.validation-error }}"

      - name: List the files
        run: |
          ls -LR

      - name: Add validation summary
        run: |
          echo "### 🛡️ Scan and Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      
          echo "| Scan Name          | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------------|--------|" >> $GITHUB_STEP_SUMMARY
      
          if [[ "${{ steps.scan-and-validate.outputs.valid-template }}" == "true" ]]; then
            echo "| Checkov Scan        | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            echo "| Validation Error    | None |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Template Validation | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            echo "| Validation Error    | \`${{ steps.scan-and-validate.outputs.validation-error }}\` |" >> $GITHUB_STEP_SUMMARY
          fi


                
  build-lambda-code:
    name: Build Lambda code
    runs-on: ubuntu-latest
    needs:
      - devsecops-scan
    steps:
      - name: Build Code
        if:  github.event.inputs.lambda == 'true'
        run: |
          echo "Build Lambda Code"

      - name: Dummy Step
        run: |
          echo "Dummy Step"
        
        
  build-glue-code:
    name: Build Glue code
    runs-on: ubuntu-latest
    needs:
      - devsecops-scan
    steps:
      - name: Build Glue Code
        if:  github.event.inputs.glue == 'true'
        run: |
          echo "Scan and upload Glue Code to S3"

      - name: Dummy Step
        run: |
          echo "Dummy Step"

  build-state-machine:
    name: Build State Machine
    runs-on: ubuntu-latest
    needs:
      - devsecops-scan
    steps:
      - name: Build State Machine
        if:  github.event.inputs.state-machine == 'true'
        run: echo "Hello from Build State Machine"

      - name: Dummy Step
        run: |
          echo "Dummy Step"
        
  build-ci-stack:
    name: Build Ci Stack
    runs-on: ubuntu-latest
    needs:
      - build-lambda-code
      - build-glue-code
      - build-state-machine
    steps:
      - name: Create Ci Stack
        run: echo "Hello from Create Ci Stack"

  delete-ci-stack:
    name: Delete Ci Stack
    runs-on: ubuntu-latest
    needs:
      - build-ci-stack
    steps:
      - name: Delete Ci Stack
        run: echo "Hello from Delete Ci Stack"

  upload-artifacts:
    name: Upload Release Artifacts
    runs-on: ubuntu-latest
    needs:
      - build-ci-stack
      - delete-ci-stack
    steps:
      - name: Upload Release Artifacts
        run: echo "Hello from Upload Release Artifacts"

  create-release:
    if: success()
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - upload-artifacts
    steps:
      - name: Create Release
        run: echo "Hello from Create Release"

