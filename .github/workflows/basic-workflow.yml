name: CloudFormation Create
run-name: CloudFormation Create Stack in ${{ github.ref_name }} by ${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      aws-role-arn:
        description: 'Arn of the role to be assumed.'
        type: string
        required: true
        default: arn:aws:iam::637423502513:role/subhamay-github-oidc-role
      aws-region:
        description: AWS region where the services will be deployed
        type: string
        required: true
        default: us-east-1
      cfn-params-file:
        description: 'CloudFormation parameters file'
        type: string
        required: true
        default: './cfn/params/cfn-parameters.json'
      ci-build:
        description: 'Is this a Ci Build ?'
        type: boolean
        required: true
        default: true

jobs:
  cfn-create:
    name: Create Stack
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write
      # To use OIDC
      id-token: write
      
    steps:
      - name: Checkout Code
        id: git-checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials from AWS account
        id: aws-config
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ inputs.aws-role-arn }}
          aws-region: ${{ inputs.aws-region }}
          role-session-name: github-aws-cloudformation-oidc

      - name: List the files in the workspace
        id: list-file
        run: |
          echo "GitHub workspace : ${{ github.workspace }}"
          cd ${{ github.workspace }}
          ls -LR
          
      - name: Generate CFN parameters
        uses: subhamay-bhattacharyya-gha/cfn-parameters-action@feature/SB-0002-fix-cfn-params
        id: gen-params
        with:
          config-file: ${{ inputs.cfn-params-file }}
          environment: devl
          ci-build: ${{ inputs.ci-build }}

      # - name: Print CFN parameters
      #   run: |
      #     echo "CloudFormation Parameters:"
      #     echo "Parameters : ${{ steps.gen-params.outputs.parameters }}"
      #     echo "Stack Name: ${{ steps.gen-params.outputs.stack-name }}"
      #     echo "Template Path: ${{ steps.gen-params.outputs.template-path }}"
      #     echo "Ci Build Identifier: ${{ steps.gen-params.outputs.ci-build-identifier }}"

          
      - name: Create the Stack
        run: |
          aws cloudformation create-stack \
          --stack-name ${{ steps.gen-params.outputs.stack-name }} \
          --parameters ${{ steps.gen-params.outputs.parameters }} \
          --template-body file://${{ github.workspace }}${{ steps.gen-params.outputs.template-path }} \
          --region ${{ inputs.aws-region }} \
          --capabilities CAPABILITY_NAMED_IAM

          echo "üöÄ Stack creation started: $STACK_NAME"
          echo "üì° Monitoring stack events..."
          
          LAST_EVENT_ID=""
          
          # Poll stack events until the stack is complete or fails
          while true; do
            EVENTS=$(aws cloudformation describe-stack-events \
              --stack-name "${{ steps.gen-params.outputs.stack-name }}" \
              --region "${{ inputs.aws-region }}" \
              --output json)
          
            # Extract and print new events only
            echo "$EVENTS" | jq -r '.StackEvents[] | "\(.Timestamp) \(.ResourceStatus) \(.LogicalResourceId) \(.ResourceType) \(.ResourceStatusReason // "")"' |
              tac | while read -r LINE; do
                EVENT_ID=$(echo "$LINE" | md5sum | awk '{print $1}')
                if [[ "$EVENT_ID" != "$LAST_EVENT_ID" ]]; then
                  echo "$LINE"
                  LAST_EVENT_ID="$EVENT_ID"
                fi
              done
          
            # Check stack status
            STATUS=$(aws cloudformation describe-stacks \
              --stack-name "${{ steps.gen-params.outputs.stack-name }}" \
              --region "${{ inputs.aws-region }}" \
              --query "Stacks[0].StackStatus" \
              --output text)
          
            if [[ "$STATUS" == "CREATE_COMPLETE" ]]; then
              echo "‚úÖ Stack creation completed!"
              break
            elif [[ "$STATUS" == "ROLLBACK_COMPLETE" || "$STATUS" == "CREATE_FAILED" ]]; then
              echo "‚ùå Stack creation failed with status: $STATUS"
              break
            fi
          
            sleep 5
          done


